package com.crud.crud.controllers;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.crud.crud.models.Pessoa;
import com.crud.crud.models.PessoaCad;

import jakarta.validation.Valid;

@Controller
@RequestMapping("/pessoas")
public class PessoaController {

    @Autowired
    private PessoaRepository repo;

    @GetMapping({"", "/"})
    public String ListaPessoa(Model model) {
        List<Pessoa> pessoas = repo.findAll(Sort.by(Sort.Direction.DESC, "id"));
        model.addAttribute("pessoa", pessoas);
        return "pessoas/index";
    }

    @GetMapping("/create")
    public String MostraCriaPessoa(Model model) {
        PessoaCad pessoacad = new PessoaCad();
        model.addAttribute("pessoacad", pessoacad);
        return "pessoas/create";
    }

    @PostMapping("/create")
    public String CriaPessoa(
        @Valid @ModelAttribute PessoaCad pessoacad,
        BindingResult result,
        Model model
    ) {
        if (result.hasErrors()) {
            model.addAttribute("pessoacad", pessoacad);
            return "pessoas/create";
        }

        Pessoa pessoa = new Pessoa();
        pessoa.setPes_nome(pessoacad.getNome());
        pessoa.setPes_cpf(pessoacad.getCpf());
        pessoa.setPes_telefone(pessoacad.getTelefone());
        pessoa.setPes_email(pessoacad.getEmail());
        pessoa.setPes_dt_ult_modificacao(LocalDateTime.now()); // Definindo a data de modificação como o momento atual

        repo.save(pessoa);

        return "redirect:/pessoas";
    }

    @GetMapping("/delete")
    public String DeletaPessoa(
        @RequestParam int id
    ) {
        try {
            Pessoa pessoa = repo.findById(id).get();
            repo.delete(pessoa);
        } catch (Exception ex) {
            System.out.println("Erro: " + ex.getMessage());
            return "redirect:/pessoas";
        }

        return "redirect:/pessoas";
    }

    @GetMapping("/edit")
    public String MostraEditaPessoa(Model model, @RequestParam int id) {
        try {
            Pessoa pessoa = repo.findById(id).get();
            model.addAttribute("pessoa", pessoa);

            PessoaCad pessoacad = new PessoaCad();
            pessoacad.setNome(pessoa.getPes_nome());
            pessoacad.setEmail(pessoa.getPes_email());
            pessoacad.setTelefone(pessoa.getPes_telefone());
            pessoacad.setCpf(pessoa.getPes_cpf());

            model.addAttribute("pessoacad", pessoacad);

        } catch (Exception ex) {
            System.out.println("Erro: " + ex.getMessage());

        }
        return "pessoas/EditaPessoas";
    }

    @PostMapping("/edit")
    public String AtualizaPessoa(Model model
                            , @RequestParam int id
                            , @Valid @ModelAttribute PessoaCad pessoacad
                            , BindingResult result) {
        try {

            Pessoa pessoa = repo.findById(id).get();
            model.addAttribute("pessoa", pessoa);

            if (result.hasErrors()) {
                return "pessoas/EditaPessoas";
            }

            pessoa.setPes_nome(pessoacad.getNome());
            pessoa.setPes_cpf(pessoacad.getCpf());
            pessoa.setPes_telefone(pessoacad.getTelefone());
            pessoa.setPes_email(pessoacad.getEmail());
            pessoa.setPes_dt_ult_modificacao(LocalDateTime.now()); // Atualiza a data de modificação

            repo.save(pessoa);

        } catch (Exception ex) {
            System.out.println("Erro: " + ex.getMessage());

        }

        return "redirect:/pessoas";
    }

}